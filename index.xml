<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nonbei alley</title>
    <link>https://blog.salrashid.me/</link>
    <description>Recent content on nonbei alley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Jan 2020 14:34:01 -0800</lastBuildDate>
    
	<atom:link href="https://blog.salrashid.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google Cloud KMS based Service Accounts for Authentication and SignedURLs</title>
      <link>https://blog.salrashid.me/posts/kms_service_accounts/</link>
      <pubDate>Mon, 06 Jan 2020 14:34:01 -0800</pubDate>
      
      <guid>https://blog.salrashid.me/posts/kms_service_accounts/</guid>
      <description>The following procedure details how to embed a Google Cloud KMS key as a Service Account.
There are two ways to associate a Service Account with a KMS key:
 Create a private key within KMS and then associate a Service Account with it. or Create a Service Account keypair; export the private key and import that key into KMS.  Once the Serivce Account private key is within KMS, you can do several things:</description>
    </item>
    
    <item>
      <title>Simple distributed tracing with OpenTracing and Stackdriver</title>
      <link>https://blog.salrashid.me/posts/opentelemetry_stackdriver/</link>
      <pubDate>Tue, 24 Dec 2019 14:34:01 -0800</pubDate>
      
      <guid>https://blog.salrashid.me/posts/opentelemetry_stackdriver/</guid>
      <description>Nothing much, just my variation/helloworld for opentelemetry in golang..its my variation of Opentelemetry-Distributed Tracing sample
This is a simple frontend-backend application you can run on your laptop which demonstrates distributed tracing between microservices.
What step 5 below shows is an inbound request to one microservice (/frontend) which emits some subspans, then makes an http call to a backend app (/backend) which also emits some spans. The final trace you see is a combined end-to-end trace between microservices.</description>
    </item>
    
    <item>
      <title>GCS SignedURL with Google AppEngine Standard (1st gen)</title>
      <link>https://blog.salrashid.me/posts/gae_signedurl/</link>
      <pubDate>Sun, 22 Dec 2019 14:34:01 -0800</pubDate>
      
      <guid>https://blog.salrashid.me/posts/gae_signedurl/</guid>
      <description>Over the years, I&amp;rsquo;ve repeatedly had to setup samples that use Google AppEngine&amp;rsquo;s (v1) to generate a SignedURL.
The following is nothing new but my variation of it (since i just had to do this again from scratch)
Sample code demonstrating GCS SignedURL using original-flavor Appengine (v1).
Note, if your&amp;rsquo;e reading this and your&amp;rsquo;e using Cloud Run, Cloud Functions or AppEngine v2, its much, much eaiser: just use the google-cloud-storage python library</description>
    </item>
    
    <item>
      <title>GCP Binary Authorization and Vulnerability Scanning Demo</title>
      <link>https://blog.salrashid.me/posts/binary_auth_demo/</link>
      <pubDate>Wed, 01 May 2019 14:34:01 -0800</pubDate>
      
      <guid>https://blog.salrashid.me/posts/binary_auth_demo/</guid>
      <description>Sample application for GCP Binary Authorization + Vulernability Scanner.
 Creates GKE cluster with Binary Authorization Enables Binary Authoriztion policy on cluster Cloud Builder workflow checks checked in code to Cloud Source repository  Builds container image and pushes to Cloud Container Registry Binary Auhorization step waits for Vulernability Scan to complete If Vulernability Scanner Fails, Deployment Fails If Succeeds, the imae is authorized for deployment to GKE    Note: this sample uses one cloud builder configuration to both build the image and do attestation.</description>
    </item>
    
    <item>
      <title>.NET on GCP</title>
      <link>https://blog.salrashid.me/posts/gcpdotnet/</link>
      <pubDate>Sun, 24 Apr 2016 14:34:01 -0800</pubDate>
      
      <guid>https://blog.salrashid.me/posts/gcpdotnet/</guid>
      <description>12/30/19: NOTE: as you can clearly tell, this article is dated. DO NOT use this (i&amp;rsquo;m leavig it up as a matter of record)
 Sample code demonstrating running trivial .NET web applications on Google Cloud Platform services.
These simply builds off of existing technologies and samples but configures it to run on GCP effeciently with healh checking and load balancing.
The example here uses Microsofts&amp;rsquo;s .NET Core 1.</description>
    </item>
    
  </channel>
</rss>