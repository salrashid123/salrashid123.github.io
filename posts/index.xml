<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on blog.salrashid.me</title>
    <link>https://blog.salrashid.me/posts/</link>
    <description>Recent content in Articles on blog.salrashid.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Dec 2019 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://blog.salrashid.me/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple distributed tracing with OpenTracing and Stackdriver</title>
      <link>https://blog.salrashid.me/posts/opentelemetry_stackdriver/</link>
      <pubDate>Tue, 24 Dec 2019 14:34:01 -0800</pubDate>
      
      <guid>https://blog.salrashid.me/posts/opentelemetry_stackdriver/</guid>
      <description>Nothing much, just my variation/helloworld for opentelemetry in golang..its my variation of Opentelemetry-Distributed Tracing sample
This is a simple frontend-backend application you can run on your laptop which demonstrates distributed tracing between microservices.
What step 5 below shows is an inbound request to one microservice (/frontend) which emits some subspans, then makes an http call to a backend app (/backend) which also emits some spans. The final trace you see is a combined end-to-end trace between microservices.</description>
    </item>
    
    <item>
      <title>Google Cloud Trace context propagation and metrics graphs with Grafana&#43;Prometheus and Stackdriver</title>
      <link>https://blog.salrashid.me/posts/cloud_trace/</link>
      <pubDate>Thu, 30 May 2019 14:34:01 -0800</pubDate>
      
      <guid>https://blog.salrashid.me/posts/cloud_trace/</guid>
      <description>I wanted to understand how to setup a standalone golang app that integrated Opencensus specifically for Tracing and Metrics. The type of tracing i was after was both automatic and between web requests. By automatic i mean if you initialize opencensus and then directly use a supporting library to access a resrouce (eg. Google Cloud Storage client), tracing information about specific actions within the GCS call is rendered (eg, time taken for each individual get/put operation).</description>
    </item>
    
    <item>
      <title>GCP Binary Authorization and Vulnerability Scanning Demo</title>
      <link>https://blog.salrashid.me/posts/binary_auth_demo/</link>
      <pubDate>Wed, 01 May 2019 14:34:01 -0800</pubDate>
      
      <guid>https://blog.salrashid.me/posts/binary_auth_demo/</guid>
      <description>Sample application for GCP Binary Authorization + Vulernability Scanner.
 Creates GKE cluster with Binary Authorization Enables Binary Authoriztion policy on cluster Cloud Builder workflow checks checked in code to Cloud Source repository  Builds container image and pushes to Cloud Container Registry Binary Auhorization step waits for Vulernability Scan to complete If Vulernability Scanner Fails, Deployment Fails If Succeeds, the imae is authorized for deployment to GKE    Note: this sample uses one cloud builder configuration to both build the image and do attestation.</description>
    </item>
    
    <item>
      <title>.NET on GCP</title>
      <link>https://blog.salrashid.me/posts/gcpdotnet/</link>
      <pubDate>Sun, 24 Apr 2016 14:34:01 -0800</pubDate>
      
      <guid>https://blog.salrashid.me/posts/gcpdotnet/</guid>
      <description>12/30/19: NOTE: as you can clearly tell, this article is dated. DO NOT use this (i&amp;rsquo;m leavig it up as a matter of record)
 Sample code demonstrating running trivial .NET web applications on Google Cloud Platform services.
These simply builds off of existing technologies and samples but configures it to run on GCP effeciently with healh checking and load balancing.
The example here uses Microsofts&amp;rsquo;s .NET Core 1.</description>
    </item>
    
  </channel>
</rss>