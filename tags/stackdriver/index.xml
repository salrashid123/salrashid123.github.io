<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stackdriver on 6equj5.dev</title>
    <link>https://salrashid123.github.io/tags/stackdriver/</link>
    <description>Recent content in Stackdriver on 6equj5.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Dec 2019 14:34:01 -0800</lastBuildDate>
    
	<atom:link href="https://salrashid123.github.io/tags/stackdriver/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple distributed tracing with OpenTracing and Stackdriver</title>
      <link>https://salrashid123.github.io/posts/opentelemetry_stackdriver/</link>
      <pubDate>Tue, 24 Dec 2019 14:34:01 -0800</pubDate>
      
      <guid>https://salrashid123.github.io/posts/opentelemetry_stackdriver/</guid>
      <description>Nothing much, just my variation/helloworld for opentelemetry in golang..its my variation of Opentelemetry-Distributed Tracing sample
This is a simple frontend-backend application you can run on your laptop which demonstrates distributed tracing between microservices.
What step 5 below shows is an inbound request to one microservice (/frontend) which emits some subspans, then makes an http call to a backend app (/backend) which also emits some spans. The final trace you see is a combined end-to-end trace between microservices.</description>
    </item>
    
    <item>
      <title>Writing Developer logs with Google Cloud Logging</title>
      <link>https://salrashid123.github.io/posts/writing_developer_logs_gcp/</link>
      <pubDate>Mon, 01 Jul 2019 14:34:01 -0800</pubDate>
      
      <guid>https://salrashid123.github.io/posts/writing_developer_logs_gcp/</guid>
      <description>Several months ago Google Cloud Logging introduced two new monitored resource types geared towards allowing developers to emit cloud logging messages for their own application centric logs. Pereviously, application logs generally had to be tied to existing predefined monitored_resources such as GCE, GKE, AppEngine, Dataflow and so on. Under those monitoried resources sources, multiple log entries were attributed to specific logNames describing the subsystem like syslog, apache2, nginx, mysql, etc.</description>
    </item>
    
    <item>
      <title>Google Cloud Trace context propagation and metrics graphs with Grafana&#43;Prometheus and Stackdriver</title>
      <link>https://salrashid123.github.io/posts/cloud_trace/</link>
      <pubDate>Thu, 30 May 2019 14:34:01 -0800</pubDate>
      
      <guid>https://salrashid123.github.io/posts/cloud_trace/</guid>
      <description>I wanted to understand how to setup a standalone golang app that integrated Opencensus specifically for Tracing and Metrics. The type of tracing i was after was both automatic and between web requests. By automatic i mean if you initialize opencensus and then directly use a supporting library to access a resrouce (eg. Google Cloud Storage client), tracing information about specific actions within the GCS call is rendered (eg, time taken for each individual get/put operation).</description>
    </item>
    
  </channel>
</rss>