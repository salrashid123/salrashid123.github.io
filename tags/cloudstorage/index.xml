<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloudstorage on 6equj5.dev</title>
    <link>https://blog.6equj5.dev/tags/cloudstorage/</link>
    <description>Recent content in Cloudstorage on 6equj5.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 May 2019 14:34:01 -0800</lastBuildDate>
    
	<atom:link href="https://blog.6equj5.dev/tags/cloudstorage/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Anti Virus file scanning on Google Cloud Storage using ClamAV</title>
      <link>https://blog.6equj5.dev/posts/clam_av/</link>
      <pubDate>Mon, 27 May 2019 14:34:01 -0800</pubDate>
      
      <guid>https://blog.6equj5.dev/posts/clam_av/</guid>
      <description>Tutorial on how to use ClamAV to scan files uploaded to Google Cloud Storage (GCS).
GCS does not have any built in capability to scan or do any other type of preprocessing on its files and relies on other services to perform these steps. In this tutorial, we will process a file that gets uploaded to GCS for viruses, malware, etc using ClamAV.
Architecture The basic flow outlined here is:</description>
    </item>
    
    <item>
      <title>Google Container Registry statistics from GCS access_logs</title>
      <link>https://blog.6equj5.dev/posts/gcr_stats/</link>
      <pubDate>Mon, 20 May 2019 14:34:01 -0800</pubDate>
      
      <guid>https://blog.6equj5.dev/posts/gcr_stats/</guid>
      <description>Sample flow to extract Google Container Registry usage statistics (image push/pull counts, analytics, etc). GCR images are hosted on Google Cloud Storage which does have the ability to export usage which means we can indirectly acquire GCR&amp;rsquo;s usage.
There are several step sto getting the following pipeline to work but in is basic form, we setup GCS bucket used by GCR to export its usage stats to another GCS bucket.</description>
    </item>
    
    <item>
      <title>Upload/Download files from a browser with GCS Signed URLs and Signed Policy Documents</title>
      <link>https://blog.6equj5.dev/posts/gcs_post_signedurl_js/</link>
      <pubDate>Sun, 28 Apr 2019 14:34:01 -0800</pubDate>
      
      <guid>https://blog.6equj5.dev/posts/gcs_post_signedurl_js/</guid>
      <description>Small javascript application showing how to upload/download files with GCS Signed URLs and Signed Policy Documents. This article will not cover in detail what those two mechanisms are but rather demonstrate a basic application that exercises both on the browser. This is a simple client-server app that uploads files using these two mechanisms from a user&amp;rsquo;s browser. SignedURLs w/ javascript has been done many times before (see references); this article describes SignedURLs and Policy document differences and implementations.</description>
    </item>
    
  </channel>
</rss>